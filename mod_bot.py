# mod_bot.py ‚Äî –≤–µ—Ä—Å–∏—è —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –≥—Ä—É–ø–ø—É
import os
import re
import asyncio
import logging
from typing import Set
from telegram.ext import ChatMemberHandler
from aiohttp import web
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# ---------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ----------
logging.basicConfig(level=logging.INFO)
log = logging.getLogger(__name__)

# ---------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ----------
TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = 1821129664  # —Ç–≤–æ–π Telegram ID

# –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å–ø–∏—Å–∫–∏
blacklist: Set[str] = {"—Ä–µ–∫–ª–∞–º–∞", "—Å—Ç–∞–≤–∫–∏", "–∫–∞–∑–∏–Ω–æ", "–≤–∫", "–∫—Ä–∏–ø—Ç–∞"}
parts_blacklist: Set[str] = {"—Ä–∞–±–æ—Ç", "—à–∞–±–∞—à"}
whitelist: Set[int] = {OWNER_ID}

# –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (–±—É–¥–µ–º –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞—Ç—å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö)
_exact_pattern = None  # compiled regex for exact blacklist words
_word_re = re.compile(r"\w+", flags=re.UNICODE)


def rebuild_exact_pattern():
    global _exact_pattern
    if not blacklist:
        _exact_pattern = None
    else:
        pattern = r"\b(" + "|".join(re.escape(w) for w in sorted(blacklist)) + r")\b"
        _exact_pattern = re.compile(pattern, flags=re.IGNORECASE | re.UNICODE)


# –Ω–∞—á–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞
rebuild_exact_pattern()


# ---------- –£—Ç–∏–ª–∏—Ç—ã ----------
async def is_admin(user_id: int, chat) -> bool:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –∏–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
    """
    if user_id == OWNER_ID:
        return True
    try:
        member = await chat.get_member(user_id)
        return member.status in ("administrator", "creator")
    except Exception as e:
        log.exception("is_admin: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞: %s", e)
        return False


def contains_blacklisted_word(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞: —Ç–æ—á–Ω—ã–π –º–∞—Ç—á –ø–æ —Å–ª–æ–≤—É –∏–ª–∏ –ø–æ —á–∞—Å—Ç–∏ (substring) –≤ —Ç–æ–∫–µ–Ω–µ."""
    if not text:
        return False
    text_lower = text.lower()

    # 1) —Ç–æ—á–Ω—ã–π –º–∞—Ç—á (—Å–ª–æ–≤–æ)
    if _exact_pattern and _exact_pattern.search(text_lower):
        return True

    # 2) —á–∞—Å—Ç–∏ ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–∫–µ–Ω
    if parts_blacklist:
        tokens = _word_re.findall(text_lower)
        for token in tokens:
            for part in parts_blacklist:
                if part and part in token:
                    return True
    return False


# ==============================
# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞
# ==============================
async def my_chat_member_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ.
    –ö–æ–≥–¥–∞ –±–æ—Ç —Å–∞–º –¥–æ–±–∞–≤–ª–µ–Ω (–Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å member/administrator/creator) ‚Äî —à–ª—ë–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.
    """
    try:
        # update.my_chat_member –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è ChatMember updates
        new = update.my_chat_member.new_chat_member
        # –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –±–æ—Ç—É
        if new.user and new.user.is_bot:
            status = new.status  # –Ω–∞–ø—Ä–∏–º–µ—Ä: 'member' –∏–ª–∏ 'administrator'
            if status in ("member", "administrator", "creator"):
                chat = update.effective_chat
                text = (
                    f"üëã –ù—É —á—Ç–æ–∂, –≤–∏–¥–∞—Ç—å –≤ {chat.title} –≤—Å—ë —Å—Ç–∞–ª–æ –Ω–∞—Å—Ç–æ–ª—å–∫–æ –ø–ª–æ—Ö–æ —Å –º–æ—à–µ–Ω–Ω–∏–∫–∞–º–∏, "
                    "—á—Ç–æ –≤–∞—à–µ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ —Å–æ–∏–∑–≤–æ–ª–∏–ª–æ –ø–æ–∑–≤–∞—Ç—å –ú–µ–Ω—è!!!\n\n"
                    "–ë—É–¥–µ–º –∑–Ω–∞–∫–æ–º—ã, –•—É–ª–µ–Ω—Å–∏–æ –í–∏–Ω–≥–∞—Ä–¥–∏–æ III, –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ: –î–∏–∫—Ç–∞—Ç–æ—Ä.\n"
                    "–ú–µ–Ω—è –∑–æ–≤—É—Ç —Ç—É–¥–∞, –≥–¥–µ —Ü–∞—Ä–∏—Ç –±–µ–∑–∑–∞–∫–æ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–ø–∞–º–∞. –ù–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, —Å—Ç–∞–≤ –≤–∞—à–∏–º –í–æ–∂–¥—ë–º —è —Å–º–æ–≥—É –ø—Ä–∏–≤–µ—Å—Ç–∏ —ç—Ç–æ –º–µ—Å—Ç–æ –≤ –ø–æ—Ä—è–¥–æ–∫\n"
                    "–í–æ—Ç –º–æ–π –ø–µ—Ä–≤—ã–π —É–∫–∞–∑: –¥–æ–ª–∂–Ω–æ—Å—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —É–ø—Ä–∞–∑–¥–Ω—è–µ—Ç—Å—è: –≤—ã –º–Ω–µ –±—É–¥–µ—Ç–µ –Ω—É–∂–Ω—ã –≤ –∫–æ–º–∏—Ç–µ—Ç–µ —Ü–µ–Ω–∑—É—Ä—ã. –ó–∞–ø—Ä–µ—Ç–∏—Ç—å –∏–ª–∏ —Ä–∞–∑—Ä–µ—à–∏—Ç—å —Å–ª–æ–≤–æ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã. –Ø –Ω–µ –ª—é–±–ª—é –≤–æ–∑–∏—Ç—å—Å—è —Å–æ –≤—Å–µ–º–∏ —ç—Ç–∏–º–∏ –¥–∏—Ä–µ–∫—Ç–∏–≤–∞–º–∏, –∏–∑–≤–∏–Ω–∏—Ç–µ.\n"
                    "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —ç–ª–∏—Ç—É —Ç–µ—Ö, –Ω–∞ –∫–æ–≥–æ —Ü–µ–Ω–∑—É—Ä–∞ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–µ –±—É–¥–µ—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç—É–¥–∞ –≤—Ö–æ–¥—è—Ç –≤—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –ö–æ–º–∏—Ç–µ—Ç–∞)\n"
                    "–ê –µ—Å–ª–∏ —Ç—ã, –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω –∑–∞–º–µ—Ç–∏–ª –∫–∞–∫ –∫—Ç–æ-—Ç–æ –æ–±–º–∞–Ω—ã–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –ø–∏—Å–∞—Ç—å –∫—Ä–∞–º–æ–ª—É, –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–≤—è–∂–∏—Å—å —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –ö–æ–º–∏—Ç–µ—Ç–∞ —Ü–µ–Ω–∑—É—Ä—ã (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º)!\n"
                    "–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ - /help\n\n"
                    "–ê —Ç–µ–ø–µ—Ä—å –æ—Å—Ç–∞–ª–∏—Å—å —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏. –ù–∞–∑–Ω–∞—á—å—Ç–µ –º–µ–Ω—è —Å–≤–æ–∏–º –¥–∏–∫—Ç–∞—Ç–æ—Ä–æ–º, –≤—ã–¥–∞–≤ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
                )
                await context.bot.send_message(chat_id=chat.id, text=text)
    except Exception as e:
        log.exception("my_chat_member_handler error: %s", e)


# ==============================
# üí¨ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
# ==============================
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        log.info("Help command from user %s in chat %s", update.effective_user.id, update.effective_chat.id if update.effective_chat else None)
    ...    
    await update.message.reply_text(
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/blacklist ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤\n"
        "/addword <—Å–ª–æ–≤–æ> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ –≤ –ß–°\n"
        "/delword <—Å–ª–æ–≤–æ> ‚Äî —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ –∏–∑ –ß–°\n"
        "/listparts ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —á–∞—Å—Ç–∏ (substring)\n"
        "/addpart <–∫—É—Å–æ–∫> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∫—É—Å–æ–∫\n"
        "/delpart <–∫—É—Å–æ–∫> ‚Äî —É–¥–∞–ª–∏—Ç—å –∫—É—Å–æ–∫\n"
        "/whitelist ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫\n"
        "/adduser <id> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ whitelist\n"
        "/deluser <id> ‚Äî —É–¥–∞–ª–∏—Ç—å\n"
        "/unban <id> ‚Äî —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    )


async def show_blacklist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not blacklist:
        await update.message.reply_text("–ß–° –ø—É—Å—Ç.")
    else:
        await update.message.reply_text("–ß–°:\n" + "\n".join(sorted(blacklist)))


async def add_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    async def add_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
        log.info("Add new word to blacklist from user %s in chat %s", update.effective_user.id, update.effective_chat.id if update.effective_chat else None)
    ...    
    if not await is_admin(update.effective_user.id, update.effective_chat):
        return await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å –ß–°.")
    if not context.args:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addword <—Å–ª–æ–≤–æ>")
    word = " ".join(context.args).strip().lower()
    blacklist.add(word)
    rebuild_exact_pattern()
    await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {word}")


async def del_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update.effective_user.id, update.effective_chat):
        return await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å –ß–°.")
    if not context.args:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delword <—Å–ª–æ–≤–æ>")
    word = " ".join(context.args).strip().lower()
    blacklist.discard(word)
    rebuild_exact_pattern()
    await update.message.reply_text(f"–£–¥–∞–ª–µ–Ω–æ: {word}")


async def list_parts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update.effective_user.id, update.effective_chat):
        return await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã.")
    if not parts_blacklist:
        return await update.message.reply_text("–ß–∞—Å—Ç–∏—á–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –ø—É—Å—Ç—ã.")
    await update.message.reply_text("–ß–∞—Å—Ç–∏:\n" + "\n".join(sorted(parts_blacklist)))


async def add_part(update: Update, context: ContextTypes.DEFAULT_TYPE):
    async def add_part(update: Update, context: ContextTypes.DEFAULT_TYPE):
        log.info("Adding new part of ban word from user %s in chat %s", update.effective_user.id, update.effective_chat.id if update.effective_chat else None)
    ...    
    if not await is_admin(update.effective_user.id, update.effective_chat):
        return await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã.")
    if not context.args:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addpart <–∫—É—Å–æ–∫>")
    part = context.args[0].lower().strip()
    parts_blacklist.add(part)
    await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω –∫—É—Å–æ–∫: {part}")


async def del_part(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update.effective_user.id, update.effective_chat):
        return await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã.")
    if not context.args:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delpart <–∫—É—Å–æ–∫>")
    part = context.args[0].lower().strip()
    parts_blacklist.discard(part)
    await update.message.reply_text(f"–£–¥–∞–ª—ë–Ω –∫—É—Å–æ–∫: {part}")


async def show_whitelist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update.effective_user.id, update.effective_chat):
        return await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã.")
    if not whitelist:
        return await update.message.reply_text("Whitelist –ø—É—Å—Ç.")
    await update.message.reply_text("Whitelist:\n" + "\n".join(str(x) for x in sorted(whitelist)))


async def add_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update.effective_user.id, update.effective_chat):
        return await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã.")
    if not context.args:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /adduser <id>")
    try:
        uid = int(context.args[0])
        whitelist.add(uid)
        await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω –≤ whitelist: {uid}")
    except ValueError:
        await update.message.reply_text("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")


async def del_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update.effective_user.id, update.effective_chat):
        return await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã.")
    if not context.args:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /deluser <id>")
    try:
        uid = int(context.args[0])
        whitelist.discard(uid)
        await update.message.reply_text(f"–£–¥–∞–ª—ë–Ω –∏–∑ whitelist: {uid}")
    except ValueError:
        await update.message.reply_text("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")


async def unban_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update.effective_user.id, update.effective_chat):
        return await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã.")
    if not context.args:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban <id>")
    try:
        uid = int(context.args[0])
        await context.bot.unban_chat_member(update.effective_chat.id, uid)
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} —Ä–∞–∑–±–∞–Ω–µ–Ω.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")


# ==============================
# üö´ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
# ==============================
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg:
        return
    if not (msg.text or msg.caption):
        return

    text = (msg.text or msg.caption or "")
    user_id = msg.from_user.id

    # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º whitelist –∏ –∞–¥–º–∏–Ω–æ–≤
    if user_id in whitelist:
        return
    if await is_admin(user_id, update.effective_chat):
        return

    if contains_blacklisted_word(text):
        try:
            await msg.delete()
            # –±–∞–Ω –∏ –±—ã—Å—Ç—Ä–∞—è –≤—ã–≥—Ä—É–∑–∫–∞ (—Ä–µ–∂–∏–º "kick")
            await update.effective_chat.ban_member(user_id)
            await update.effective_chat.unban_member(user_id)
            await update.message.reply_text(f"üö´ –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–∫–ª—é—á—ë–Ω: {msg.from_user.full_name}")
            log.info("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: %s ‚Äî %s", user_id, text)
        except Exception as e:
            log.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ/—É–¥–∞–ª–µ–Ω–∏–∏: %s", e)


# ---------- Web server –¥–ª—è keep-alive (aiohttp) ----------
async def web_root(request):
    return web.Response(text="ok")


async def start_keepalive_server(app_obj):
    # –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ post_init
    runner = web.AppRunner(app_obj["web_app"])
    await runner.setup()
    port = int(os.getenv("PORT", "3000"))
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    log.info("Keep-alive server started on port %s", port)


# ---------- –°–±–æ—Ä–∫–∞ Application –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ----------
def build_application():
    if not TOKEN:
        raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")

    app = ApplicationBuilder().token(TOKEN).build()

    # –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("blacklist", show_blacklist))
    app.add_handler(CommandHandler("addword", add_word))
    app.add_handler(CommandHandler("delword", del_word))

    app.add_handler(CommandHandler("listparts", list_parts))
    app.add_handler(CommandHandler("addpart", add_part))
    app.add_handler(CommandHandler("delpart", del_part))

    app.add_handler(CommandHandler("whitelist", show_whitelist))
    app.add_handler(CommandHandler("adduser", add_user))
    app.add_handler(CommandHandler("deluser", del_user))

    app.add_handler(CommandHandler("unban", unban_user))
    app.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, handle_message))
    # –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –∫–æ–≥–¥–∞ –±–æ—Ç–∞ –¥–æ–±–∞–≤–ª—è—é—Ç
    app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, bot_added_to_group))
    app.add_handler(ChatMemberHandler(my_chat_member_handler, ChatMemberHandler.MY_CHAT_MEMBER))    

    # post_init ‚Äî –∑–∞–ø—É—Å–∫ keep-alive —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ç–∞—Å–∫–µ
    async def _post_init(application):
        # —Å–æ–∑–¥–∞—ë–º aiohttp web app –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç
        web_app = web.Application()
        web_app.router.add_get("/", web_root)
        # –∫–ª–∞–¥—ë–º –µ–≥–æ –≤ application (–¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Å—Ç–∞—Ä—Ç–µ)
        application.bot_data["web_app"] = web_app
        # —Å—Ç–∞—Ä—Ç—É–µ–º —Å–µ—Ä–≤–µ—Ä
        asyncio.create_task(start_keepalive_server(application.bot_data))

    app.post_init = _post_init
    return app


# ---------- main ----------
if __name__ == "__main__":
    try:
        application = build_application()
        log.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
        application.run_polling()
    except Exception:
        log.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ")