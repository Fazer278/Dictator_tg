from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import re
import os

# ---- –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –≥—Ä—É–ø–ø—É ----
async def bot_added_to_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.message.chat
    await update.message.reply_text(
        f"üëã –ù—É —á—Ç–æ–∂, –≤–∏–¥–∞—Ç—å –≤ {chat.title} –≤—Å—ë —Å—Ç–∞–ª–æ –Ω–∞—Å—Ç–æ–ª—å–∫–æ –ø–ª–æ—Ö–æ —Å –º–æ—à–µ–Ω–Ω–∏–∫–∞–º–∏, —á—Ç–æ –≤–∞—à–µ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ —Å–æ–∏–∑–≤–æ–ª–∏–ª–æ –ø–æ–∑–≤–∞—Ç—å –ú–µ–Ω—è!!!\n\n"
        "–ë—É–¥–µ–º –∑–Ω–∞–∫–æ–º—ã, –•—É–ª–µ–Ω—Å–∏–æ –í–∏–Ω–≥–∞—Ä–¥–∏–æ III, –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ: –î–∏–∫—Ç–∞—Ç–æ—Ä.\n"
        "–ú–µ–Ω—è –∑–æ–≤—É—Ç —Ç—É–¥–∞, –≥–¥–µ —Ü–∞—Ä–∏—Ç –±–µ–∑–∑–∞–∫–æ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–ø–∞–º–∞. –ù–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, —Å—Ç–∞–≤ –≤–∞—à–∏–º –í–æ–∂–¥—ë–º —è —Å–º–æ–≥—É –ø—Ä–∏–≤–µ—Å—Ç–∏ —ç—Ç–æ –º–µ—Å—Ç–æ –≤ –ø–æ—Ä—è–¥–æ–∫\n"
        "–í–æ—Ç –º–æ–π –ø–µ—Ä–≤—ã–π —É–∫–∞–∑: –¥–æ–ª–∂–Ω–æ—Å—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —É–ø—Ä–∞–∑–¥–Ω—è–µ—Ç—Å—è: –≤—ã –º–Ω–µ –±—É–¥–µ—Ç–µ –Ω—É–∂–Ω—ã –≤ –∫–æ–º–∏—Ç–µ—Ç–µ —Ü–µ–Ω–∑—É—Ä—ã. –ó–∞–ø—Ä–µ—Ç–∏—Ç—å –∏–ª–∏ —Ä–∞–∑—Ä–µ—à–∏—Ç—å —Å–ª–æ–≤–æ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã. –Ø –Ω–µ –ª—é–±–ª—é –≤–æ–∑–∏—Ç—å—Å—è —Å–æ –≤—Å–µ–º–∏ —ç—Ç–∏–º–∏ –¥–∏—Ä–µ–∫—Ç–∏–≤–∞–º–∏, –∏–∑–≤–∏–Ω–∏—Ç–µ.\n"
        "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —ç–ª–∏—Ç—É —Ç–µ—Ö, –Ω–∞ –∫–æ–≥–æ —Ü–µ–Ω–∑—É—Ä–∞ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–µ –±—É–¥–µ—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç—É–¥–∞ –≤—Ö–æ–¥—è—Ç –≤—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –ö–æ–º–∏—Ç–µ—Ç–∞)\n"
        "–ê –µ—Å–ª–∏ —Ç—ã, –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω –∑–∞–º–µ—Ç–∏–ª –∫–∞–∫ –∫—Ç–æ-—Ç–æ –æ–±–º–∞–Ω—ã–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –ø–∏—Å–∞—Ç—å –∫—Ä–∞–º–æ–ª—É, –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–≤—è–∂–∏—Å—å —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –ö–æ–º–∏—Ç–µ—Ç–∞ —Ü–µ–Ω–∑—É—Ä—ã (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º)!\n"
        "–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ - /help\n\n"
        "–ê —Ç–µ–ø–µ—Ä—å –æ—Å—Ç–∞–ª–∏—Å—å —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏. –ù–∞–∑–Ω–∞—á—å—Ç–µ –º–µ–Ω—è —Å–≤–æ–∏–º –¥–∏–∫—Ç–∞—Ç–æ—Ä–æ–º, –≤—ã–¥–∞–≤ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
    )

# ==============================
# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# ==============================
TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = 1821129664  # —Ç–≤–æ–π Telegram ID

# –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤
blacklist = {"—Ä–µ–∫–ª–∞–º–∞", "—Å—Ç–∞–≤–∫–∏", "–∫–∞–∑–∏–Ω–æ", "–≤–∫", "–∫—Ä–∏–ø—Ç–∞"}

# –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
whitelist = {OWNER_ID}

# ==============================
# ‚öôÔ∏è –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ==============================
def is_admin(user_id: int, chat):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –∏–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º"""
    if user_id == OWNER_ID:
        return True
    try:
        member = chat.get_member(user_id)
        return member.status in ["administrator", "creator"]
    except Exception:
        return False

def contains_blacklisted_word(text: str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ —Å–ª–æ–≤–∞ –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
    text_lower = text.lower()
    for word in blacklist:
        if re.search(rf"\b{re.escape(word)}\b", text_lower):
            return True
    return False

# ==============================
# üí¨ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
# ==============================
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/blacklist ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤\n"
        "/addword <—Å–ª–æ–≤–æ> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ –≤ –ß–°\n"
        "/delword <—Å–ª–æ–≤–æ> ‚Äî —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ –∏–∑ –ß–°\n"
        "/whitelist ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫\n"
        "/adduser <id> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫\n"
        "/deluser <id> ‚Äî —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞\n"
        "/unban <id> ‚Äî —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        parse_mode="Markdown"
    )

async def show_blacklist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "–ü–æ–∫–∞ —á—Ç–æ –≤ —á–∞—Ç–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø–æ–ª–Ω–∞—è —Å–≤–æ–±–æ–¥–∞ —Å–ª–æ–≤–∞. –û—Ç—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫—É—é –æ—Ç—Ç–µ–ø–µ–ª—å!" if not blacklist else "–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤\n" + "\n".join(blacklist)
    await update.message.reply_text(text)

async def add_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id, update.effective_chat):
        return await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–Ω–æ–º–æ—á–∏–π")
    if not context.args:
        return await update.message.reply_text("–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: /addword <—Å–ª–æ–≤–æ>")
    word = context.args[0].lower()
    blacklist.add(word)
    await update.message.reply_text(f"–ò–∑–¥–∞–Ω –¥–µ–∫—Ä–µ—Ç –æ –∑–∞–ø—Ä–µ—Ç–µ —Å–ª–æ–≤–∞: {word}")

async def del_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id, update.effective_chat):
        return await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–Ω–æ–º–æ—á–∏–π")
    if not context.args:
        return await update.message.reply_text("–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: /delword <—Å–ª–æ–≤–æ>")
    word = context.args[0].lower()
    if word in blacklist:
        blacklist.remove(word)
        await update.message.reply_text(f"–î–∏—Ä–µ–∫—Ç–∏–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞: {word}")
    else:
        await update.message.reply_text("–í—ã –µ—â—ë –Ω–µ –∑–∞–ø—Ä–µ—â–∞–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–æ. –≠—Ç–æ –º–æ–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å")

async def show_whitelist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —ç–ª–∏—Ç" if not whitelist else "–≠–ª–∏—Ç–∞:\n" + "\n".join(str(uid) for uid in whitelist)
    await update.message.reply_text(text)

async def add_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id, update.effective_chat):
        return await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–Ω–æ–º–æ—á–∏–π.")
    if not context.args:
        return await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ ID –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞: /adduser <id>")
    try:
        user_id = int(context.args[0])
        whitelist.add(user_id)
        await update.message.reply_text(f"–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —ç–ª–∏—Ç.")
    except ValueError:
        await update.message.reply_text("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

async def del_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id, update.effective_chat):
        return await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–Ω–æ–º–æ—á–∏–π.")
    if not context.args:
        return await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ ID –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞: /deluser <id>")
    try:
        user_id = int(context.args[0])
        if user_id in whitelist:
            whitelist.remove(user_id)
            await update.message.reply_text(f"–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω {user_id} —Ä–∞–∑–∂–∞–ª–æ–≤–∞–Ω –∏ –±–æ–ª—å—à–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —ç–ª–∏—Ç–æ–π. –ì–æ–Ω–∏—Ç–µ –µ–≥–æ! –ù–∞—Å–º–µ—Ö–∞–π—Ç–µ—Å—å –Ω–∞–¥ –Ω–∏–º!")
        else:
            await update.message.reply_text("–≠—Ç–æ—Ç –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω –∏ —Ç–∞–∫ –Ω–µ –∏–º–µ–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –ø—Ä–µ—Ñ–µ—Ä–µ–Ω—Ü–∏–π.")
    except ValueError:
        await update.message.reply_text("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

async def unban_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id, update.effective_chat):
        return await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–Ω–æ–º–æ—á–∏–π.")
    if not context.args:
        return await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ ID: /unban <id>")
    try:
        user_id = int(context.args[0])
        await context.bot.unban_chat_member(update.effective_chat.id, user_id)
        await update.message.reply_text(f" –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω {user_id} —Ä–µ–∞–±–∏–ª–∏—Ç–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ—â–∞–π—Ç–µ, —É—Ä–∞–Ω–æ–≤—ã–µ —Ä—É–¥–Ω–∏–∫–∏!")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

# ==============================
# üö´ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
# ==============================
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg or not msg.text:
        return

    user_id = msg.from_user.id

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫
    if user_id in whitelist:
        return

    text = msg.text

    if contains_blacklisted_word(text):
        try:
            await msg.delete()
            await msg.chat.ban_member(user_id)
            await msg.chat.unban_member(user_id)
            await msg.reply_text(f"üö´ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {msg.from_user.first_name} —É–¥–∞–ª–µ–Ω–æ –∑–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–µ —Å–ª–æ–≤–æ.")
            print(f"‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {text}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–ª–∏ –±–∞–Ω–µ: {e}")

# ==============================
# üöÄ –ó–∞–ø—É—Å–∫
# ==============================
def build_app():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("blacklist", show_blacklist))
    app.add_handler(CommandHandler("addword", add_word))
    app.add_handler(CommandHandler("delword", del_word))
    app.add_handler(CommandHandler("whitelist", show_whitelist))
    app.add_handler(CommandHandler("adduser", add_user))
    app.add_handler(CommandHandler("deluser", del_user))
    app.add_handler(CommandHandler("unban", unban_user))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    return app


if __name__ == "__main__":
    app = build_app()
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã...")
    app.run_polling()
